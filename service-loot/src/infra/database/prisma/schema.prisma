generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  userId        String    @unique @map("user_id")
  orangeEssence Int       @map("orange_essence")
  mythicEssence Int       @map("mythic_essence")
  keys          Int       @map("keys")
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @default(now()) @map("updated_at")

  userItems UserItem[]

  @@index([userId])
  @@map("users")
}

model Capsule {
  id            String    @id @default(uuid())
  name          String
  requiresKey   Boolean   @map("requires_key")
  minItemsPrize Int
  maxItemsPrize Int
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @default(now()) @map("updated_at")

  rewards CapsuleItem[]
  odds    CapsuleOdd[]

  @@map("capsules")
}

model CapsuleOdd {
  id         String     @id @default(uuid())
  capsuleId  String     @map("capsule_id")
  rarityTier RarityTier @map("rarity_tier")
  odd        Float
  createdAt  DateTime?  @default(now()) @map("created_at")

  capsule Capsule @relation(fields: [capsuleId], references: [id])

  @@map("capsule_odds")
}

model UserCapsule {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  capsuleId String    @map("capsule_id")
  openedAt  DateTime? @map("opened_at")
  createdAt DateTime? @default(now()) @map("created_at")

  belongsToUserItems UserItem[]

  @@index([userId])
  @@map("user_capsules")
}

model Item {
  id         String     @id @default(uuid())
  itemId     String     @unique @map("item_id")
  name       String
  type       ItemType
  rarityTier RarityTier @map("rarity_tier")
  createdAt  DateTime?  @default(now()) @map("created_at")
  updatedAt  DateTime?  @default(now()) @map("updated_at")

  capsuleItems CapsuleItem[]

  @@index([type])
  @@map("items")
}

model CapsuleItem {
  id        String    @id @default(uuid())
  capsuleId String    @map("capsule_id")
  itemId    String    @map("item_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  capsule Capsule @relation(fields: [capsuleId], references: [id])
  item    Item    @relation(fields: [itemId], references: [id])

  @@map("capsule_items")
}

model UserItem {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  itemId        String       @map("item_id")
  type          UserItemType
  userCapsuleId String?      @map("user_capsule_id")
  createdAt     DateTime?    @default(now()) @map("created_at")

  userCapsule UserCapsule? @relation(fields: [userCapsuleId], references: [id])
  user        User         @relation(fields: [userId], references: [userId])

  @@map("user_items")
}

enum ItemType {
  CHAMPION
  SKIN
  CHROMA
}

enum RarityTier {
  STANDARD
  EPIC
  LEGENDARY
  MYTHIC
  ULTIMATE
  EXCLUSIVE
}

enum UserItemType {
  CHAMPION_FRAGMENT
}
